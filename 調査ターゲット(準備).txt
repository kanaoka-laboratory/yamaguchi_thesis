Google社、Tinkのプリミティブ
APKの取得方法
smaliファイル取得方法

どうやって準備したか、用意したもの

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
・APKの取得方法
　- smaliファイル化方法
　　河合さんの論文に書いてある
　

・APKに使われている暗号技術
　APKに使われている暗号技術は大きく分けて3つに分類することができる。

　　－公式API
公式APIとは、Androidの開発者向け公式WebサイトであるAndroid Developersの
APIリファレンスに記載されているAPIである。


　　－サードパーティ製API
サードパーティー製APIとは、サードパーティが提供するAPIのことである。
サードパーティとは、特定のハードウェア、OS、ソフトウェア、あるいはサービスなどを対象として、
それに対応する製品を販売、提供している組織や企業のことを指す。
Google社のtinkやFacebook社のConcealnがある。

　　－独自実装等のAPI
API開発者が既存のAPIを利用せずに独自に実装したAPIや、
先述2つに含まれないものを独自実装等のAPIと本論文では呼ぶこととする。

・APIの分析
河合による先行研究では、Android Developers のAPI リファレンスに記載されているAPIから、暗号・セキュリティに関
するパッケージ、クラス、メソッドを抽出しリスト化を行った。
このリストをもとにAPKにおいてど
れほど暗号技術が利用されているかの分析を行った。

独自実装等のAPIはドキュメントが公開されている可能性
が低いためAPIのリスト化が困難である。これは、
RSAやECC、Cryptoといった暗号、セキュリティ
に関するキーワードをAPIのリストの代わりとし検
索する必要があるためAPKの網羅的調査を行う上
で困難である。

比較して、サードパーティー製API
ではドキュメントが公開されているものもあるので
リスト化の困難性が少ない。
サードパーティ製のAPIの分析ではまずAPIのリスト化を行う必要があるが、サードパーティー製
APIは公式APIとは違いドキュメントが作成され
ていないものがある。存在しない場合はサードパー
ティ製の APIのソースコードを解析し、APIのド
キュメントを作成してからAPIのリストの作成を行う。


そこで、本研究では特
にドキュメントが作成されているサードパーティー製APIを分析対象とする。
ドキュメントが作成されていないサードパーティ製APIと、独自実装等のAPIは今後の課題とする。


・サードパーティ製APIの例

　- Tink
Tinkは、Googleの暗号技術者とセキュリティエンジニアのグループが開発した、
多言語でクロスプラットフォームな暗号ライブラリである。
　
 - Conceal
Facebookが開発したライブラリである。共通鍵暗号アルゴリズム AES(256bit)と暗号利用モード GCMを用いた暗号化処理を代行する。
 https://github.com/facebookarchive/conceal#encryption

見たサイト
https://www.infoq.com/jp/news/2014/02/encrypt-android-conceal/
https://github.com/ConcealNetwork/conceal-api 
https://qiita.com/kobakei/items/cb67f8b605b69b11b4eb
https://github.com/facebook?language=java
https://github.com/facebookarchive/conceal

Android OSを提供しているGoogle社によるサードパーティAPIであるため、
Androidアプリケーション開発者にも利用されている可能性は高いと考えられるため
https://ken5scal.hatenablog.com/entry/2016/12/24/Android%E3%81%AEConceal%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%82%92%E8%AA%AD%E3%82%80






・Tinkの分析
Tinkは、Googleの暗号技術者とセキュリティエンジニアのグループが開発した、
多言語でクロスプラットフォームな暗号ライブラリである。
Tinkは、現在4つの暗号化操作を提供している。
　　　　関連データを備えた認証付き暗号(プリミティブ: AEAD)
　　　　メッセージ認証コード (プリミティブ: MAC)
　　　　ディジタル署名(プリミティブ: PublicKeySignとPublicKeyVerify)
　　　　ハイブリッド暗号化(プリミティブ: HybridEncryptとHybridDecrypt)
プリミティブとは、単純あるいは基本的な構造や要素のことを言う。
各操作には、関連する最小限のプロパティセットと保証がある。
プリミティブは複数の実装を持つことが可能で、ユーザが実際に使用する実装は、
応答する型のキーを使用している。
例えば、AEADプリミティブを使ってAES-EAXでテキストを暗号化する場合は、このようになる。

Tinkには、ドキュメントが存在するので、ドキュメントが存在しない
サードパーティ製APIよりリスト化しやすい。
本研究では、この4つのプリミティブを対象に研究を進めていくく
（このようになる。～）https://www.infoq.com/jp/news/2018/10/google-tink-cryto-ios-android/　
プリミティブ：https://e-words.jp/w/%E3%83%97%E3%83%AA%E3%83%9F%E3%83%86%E3%82%A3%E3%83%96.html
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
提供された機能の抽象表現を提供するプリミティブを
介して暗号タスクを実行する。Tinkプリミティブは、次の暗号化操作を包含し、
対応するインターフェイスを介してサポートされている。


・暗号の説明をしていく。
　AEAD
AEADとは、Authenticated Encryption with Associated Dataの略であり認証付暗号化方式のことである。
https://sehermitage.web.fc2.com/crypto/enc_auth.html

・MAC

https://spring-mt.hatenablog.com/entry/2017/08/20/202708#:~:text=Authenticated%20Encryption%20with%20Associated%20Data%20%E3%82%92%E7%95%A5%E3%81%97%E3%81%A6,AEAD%20%E3%81%A8%E3%82%82%E5%91%BC%E3%81%B0%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82%20MAC%20(%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%AA%8D%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89)%E3%81%A8%E5%AF%BE%E7%A7%B0%E6%9A%97%E5%8F%B7%E3%82%92%E7%B5%84%E3%81%BF%E5%90%88%E3%82%8F%E3%81%9B%E3%81%A6%E3%80%81%E6%A9%9F%E5%AF%86%E6%80%A7%20(%E6%9A%97%E5%8F%B7)%E3%80%81%E8%AA%8D%E8%A8%BC%E3%83%BB%E6%AD%A3%E7%9C%9F%E6%80%A7%20(MAC%20(%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%AA%8D%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89))%E3%82%92%E6%BA%80%E3%81%9F%E3%81%99%E4%BB%95%E7%B5%84%E3%81%BF%E3%81%A7%E3%81%99%E3%80%82
https://e-words.jp/w/%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E8%AA%8D%E8%A8%BC.html


・APIの取得方法
Tinkのドキュメントページ[https://google.github.io/tink/javadoc/tink-android/1.5.0/ ]
からAPIを抽出する。そのクラス（計167個）が持つ
メソッド計０００個のリスト化を行った。このリストは、2020年００月のものである。
リストの1部を抜粋し、表０に示す。リスト全体は付録Aに示す。


正規表現について
https://userweb.mnet.ne.jp/nakama/
https://www.zacoding.com/post/regex-comma-separated/
https://murashun.jp/article/programming/regular-expression.html





